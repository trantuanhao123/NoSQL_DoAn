package DAO;

import MODELS.Product;
import MODELS.ProductHelper__MapperGenerated;
import com.datastax.oss.driver.api.core.PagingIterable;
import com.datastax.oss.driver.api.core.cql.BoundStatement;
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.api.mapper.entity.saving.NullSavingStrategy;
import com.datastax.oss.driver.internal.core.util.concurrent.BlockingOperation;
import com.datastax.oss.driver.internal.core.util.concurrent.CompletableFutures;
import com.datastax.oss.driver.internal.mapper.DaoBase;
import com.datastax.oss.driver.internal.querybuilder.update.DefaultUpdate;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
@SuppressWarnings("all")
public class ProductDAOImpl__MapperGenerated extends DaoBase implements ProductDAO {
  private static final Logger LOG = LoggerFactory.getLogger(ProductDAOImpl__MapperGenerated.class);

  private final ProductHelper__MapperGenerated productHelper;

  private final PreparedStatement saveStatement;

  private final PreparedStatement updateStatement;

  private final PreparedStatement deleteStatement;

  private final PreparedStatement findByIdStatement;

  private final PreparedStatement findAllStatement;

  private final PreparedStatement findByBrandStatement;

  private final PreparedStatement findByAvailableStatement;

  private ProductDAOImpl__MapperGenerated(MapperContext context,
      ProductHelper__MapperGenerated productHelper, PreparedStatement saveStatement,
      PreparedStatement updateStatement, PreparedStatement deleteStatement,
      PreparedStatement findByIdStatement, PreparedStatement findAllStatement,
      PreparedStatement findByBrandStatement, PreparedStatement findByAvailableStatement) {
    super(context);
    this.productHelper = productHelper;
    this.saveStatement = saveStatement;
    this.updateStatement = updateStatement;
    this.deleteStatement = deleteStatement;
    this.findByIdStatement = findByIdStatement;
    this.findAllStatement = findAllStatement;
    this.findByBrandStatement = findByBrandStatement;
    this.findByAvailableStatement = findByAvailableStatement;
  }

  @Override
  public void save(Product product) {
    BoundStatementBuilder boundStatementBuilder = saveStatement.boundStatementBuilder();
    productHelper.set(product, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public void update(Product product) {
    BoundStatementBuilder boundStatementBuilder = updateStatement.boundStatementBuilder();
    productHelper.set(product, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public void delete(Product product) {
    BoundStatementBuilder boundStatementBuilder = deleteStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("product_id", product.getProductId(), String.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public Product findById(String productId) {
    BoundStatementBuilder boundStatementBuilder = findByIdStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("product_id", productId, String.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToSingleEntity(boundStatement, productHelper);
  }

  @Override
  public PagingIterable<Product> findAll() {
    BoundStatementBuilder boundStatementBuilder = findAllStatement.boundStatementBuilder();
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, productHelper);
  }

  @Override
  public PagingIterable<Product> findByBrand(String brand) {
    BoundStatementBuilder boundStatementBuilder = findByBrandStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("brand", brand, String.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, productHelper);
  }

  @Override
  public PagingIterable<Product> findByAvailable(boolean available) {
    BoundStatementBuilder boundStatementBuilder = findByAvailableStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.setBoolean("available", available);
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, productHelper);
  }

  public static CompletableFuture<ProductDAO> initAsync(MapperContext context) {
    LOG.debug("[{}] Initializing new instance for keyspace = {} and table = {}",
        context.getSession().getName(),
        context.getKeyspaceId(),
        context.getTableId());
    throwIfProtocolVersionV3(context);
    try {
      // Initialize all entity helpers
      ProductHelper__MapperGenerated productHelper = new ProductHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        productHelper.validateEntityFields();
      }
      List<CompletionStage<PreparedStatement>> prepareStages = new ArrayList<>();
      // Prepare the statement for `save(MODELS.Product)`:
      SimpleStatement saveStatement_simple = productHelper.insert().build();
      LOG.debug("[{}] Preparing query `{}` for method save(MODELS.Product)",
          context.getSession().getName(),
          saveStatement_simple.getQuery());
      CompletionStage<PreparedStatement> saveStatement = prepare(saveStatement_simple, context);
      prepareStages.add(saveStatement);
      // Prepare the statement for `update(MODELS.Product)`:
      SimpleStatement updateStatement_simple = SimpleStatement.newInstance(((DefaultUpdate)productHelper.updateByPrimaryKey()).asCql());
      LOG.debug("[{}] Preparing query `{}` for method update(MODELS.Product)",
          context.getSession().getName(),
          updateStatement_simple.getQuery());
      CompletionStage<PreparedStatement> updateStatement = prepare(updateStatement_simple, context);
      prepareStages.add(updateStatement);
      // Prepare the statement for `delete(MODELS.Product)`:
      SimpleStatement deleteStatement_simple = productHelper.deleteByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method delete(MODELS.Product)",
          context.getSession().getName(),
          deleteStatement_simple.getQuery());
      CompletionStage<PreparedStatement> deleteStatement = prepare(deleteStatement_simple, context);
      prepareStages.add(deleteStatement);
      // Prepare the statement for `findById(java.lang.String)`:
      SimpleStatement findByIdStatement_simple = productHelper.selectByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method findById(java.lang.String)",
          context.getSession().getName(),
          findByIdStatement_simple.getQuery());
      CompletionStage<PreparedStatement> findByIdStatement = prepare(findByIdStatement_simple, context);
      prepareStages.add(findByIdStatement);
      // Prepare the statement for `findAll()`:
      SimpleStatement findAllStatement_simple = productHelper.selectByPrimaryKeyParts(0).build();
      LOG.debug("[{}] Preparing query `{}` for method findAll()",
          context.getSession().getName(),
          findAllStatement_simple.getQuery());
      CompletionStage<PreparedStatement> findAllStatement = prepare(findAllStatement_simple, context);
      prepareStages.add(findAllStatement);
      // Prepare the statement for `findByBrand(java.lang.String)`:
      SimpleStatement findByBrandStatement_simple = productHelper.selectStart().whereRaw("brand = :brand").build();
      LOG.debug("[{}] Preparing query `{}` for method findByBrand(java.lang.String)",
          context.getSession().getName(),
          findByBrandStatement_simple.getQuery());
      CompletionStage<PreparedStatement> findByBrandStatement = prepare(findByBrandStatement_simple, context);
      prepareStages.add(findByBrandStatement);
      // Prepare the statement for `findByAvailable(boolean)`:
      SimpleStatement findByAvailableStatement_simple = productHelper.selectStart().whereRaw("available = :available").build();
      LOG.debug("[{}] Preparing query `{}` for method findByAvailable(boolean)",
          context.getSession().getName(),
          findByAvailableStatement_simple.getQuery());
      CompletionStage<PreparedStatement> findByAvailableStatement = prepare(findByAvailableStatement_simple, context);
      prepareStages.add(findByAvailableStatement);
      // Initialize all method invokers
      // Build the DAO when all statements are prepared
      return CompletableFutures.allSuccessful(prepareStages)
          .thenApply(v -> (ProductDAO) new ProductDAOImpl__MapperGenerated(context,
              productHelper,
              CompletableFutures.getCompleted(saveStatement),
              CompletableFutures.getCompleted(updateStatement),
              CompletableFutures.getCompleted(deleteStatement),
              CompletableFutures.getCompleted(findByIdStatement),
              CompletableFutures.getCompleted(findAllStatement),
              CompletableFutures.getCompleted(findByBrandStatement),
              CompletableFutures.getCompleted(findByAvailableStatement)))
          .toCompletableFuture();
    } catch (Throwable t) {
      return CompletableFutures.failedFuture(t);
    }
  }

  public static ProductDAO init(MapperContext context) {
    BlockingOperation.checkNotDriverThread();
    return CompletableFutures.getUninterruptibly(initAsync(context));
  }
}
