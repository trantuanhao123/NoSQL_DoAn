package DAO;

import MODELS.Customer;
import MODELS.CustomerHelper__MapperGenerated;
import com.datastax.oss.driver.api.core.PagingIterable;
import com.datastax.oss.driver.api.core.cql.BoundStatement;
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.api.mapper.entity.saving.NullSavingStrategy;
import com.datastax.oss.driver.internal.core.util.concurrent.BlockingOperation;
import com.datastax.oss.driver.internal.core.util.concurrent.CompletableFutures;
import com.datastax.oss.driver.internal.mapper.DaoBase;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
@SuppressWarnings("all")
public class CustomerDAOImpl__MapperGenerated extends DaoBase implements CustomerDAO {
  private static final Logger LOG = LoggerFactory.getLogger(CustomerDAOImpl__MapperGenerated.class);

  private final CustomerHelper__MapperGenerated customerHelper;

  private final PreparedStatement saveStatement;

  private final PreparedStatement findByIdStatement;

  private final PreparedStatement findByEmailStatement;

  private final PreparedStatement findByPhoneStatement;

  private final PreparedStatement findAllStatement;

  private final PreparedStatement findAllWithFilteringStatement;

  private final PreparedStatement deleteStatement;

  private CustomerDAOImpl__MapperGenerated(MapperContext context,
      CustomerHelper__MapperGenerated customerHelper, PreparedStatement saveStatement,
      PreparedStatement findByIdStatement, PreparedStatement findByEmailStatement,
      PreparedStatement findByPhoneStatement, PreparedStatement findAllStatement,
      PreparedStatement findAllWithFilteringStatement, PreparedStatement deleteStatement) {
    super(context);
    this.customerHelper = customerHelper;
    this.saveStatement = saveStatement;
    this.findByIdStatement = findByIdStatement;
    this.findByEmailStatement = findByEmailStatement;
    this.findByPhoneStatement = findByPhoneStatement;
    this.findAllStatement = findAllStatement;
    this.findAllWithFilteringStatement = findAllWithFilteringStatement;
    this.deleteStatement = deleteStatement;
  }

  @Override
  public void save(Customer customer) {
    BoundStatementBuilder boundStatementBuilder = saveStatement.boundStatementBuilder();
    customerHelper.set(customer, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public Customer findById(UUID customerId) {
    BoundStatementBuilder boundStatementBuilder = findByIdStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("customer_id", customerId, UUID.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToSingleEntity(boundStatement, customerHelper);
  }

  @Override
  public PagingIterable<Customer> findByEmail(String email) {
    BoundStatementBuilder boundStatementBuilder = findByEmailStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("email", email, String.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, customerHelper);
  }

  @Override
  public PagingIterable<Customer> findByPhone(String phone) {
    BoundStatementBuilder boundStatementBuilder = findByPhoneStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("phone", phone, String.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, customerHelper);
  }

  @Override
  public PagingIterable<Customer> findAll() {
    BoundStatementBuilder boundStatementBuilder = findAllStatement.boundStatementBuilder();
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, customerHelper);
  }

  @Override
  public PagingIterable<Customer> findAllWithFiltering() {
    BoundStatementBuilder boundStatementBuilder = findAllWithFilteringStatement.boundStatementBuilder();
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, customerHelper);
  }

  @Override
  public void delete(Customer customer) {
    BoundStatementBuilder boundStatementBuilder = deleteStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("customer_id", customer.getCustomerId(), UUID.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  public static CompletableFuture<CustomerDAO> initAsync(MapperContext context) {
    LOG.debug("[{}] Initializing new instance for keyspace = {} and table = {}",
        context.getSession().getName(),
        context.getKeyspaceId(),
        context.getTableId());
    throwIfProtocolVersionV3(context);
    try {
      // Initialize all entity helpers
      CustomerHelper__MapperGenerated customerHelper = new CustomerHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        customerHelper.validateEntityFields();
      }
      List<CompletionStage<PreparedStatement>> prepareStages = new ArrayList<>();
      // Prepare the statement for `save(MODELS.Customer)`:
      SimpleStatement saveStatement_simple = customerHelper.insert().build();
      LOG.debug("[{}] Preparing query `{}` for method save(MODELS.Customer)",
          context.getSession().getName(),
          saveStatement_simple.getQuery());
      CompletionStage<PreparedStatement> saveStatement = prepare(saveStatement_simple, context);
      prepareStages.add(saveStatement);
      // Prepare the statement for `findById(java.util.UUID)`:
      SimpleStatement findByIdStatement_simple = customerHelper.selectByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method findById(java.util.UUID)",
          context.getSession().getName(),
          findByIdStatement_simple.getQuery());
      CompletionStage<PreparedStatement> findByIdStatement = prepare(findByIdStatement_simple, context);
      prepareStages.add(findByIdStatement);
      // Prepare the statement for `findByEmail(java.lang.String)`:
      SimpleStatement findByEmailStatement_simple = customerHelper.selectStart().whereRaw("email = :email").build();
      LOG.debug("[{}] Preparing query `{}` for method findByEmail(java.lang.String)",
          context.getSession().getName(),
          findByEmailStatement_simple.getQuery());
      CompletionStage<PreparedStatement> findByEmailStatement = prepare(findByEmailStatement_simple, context);
      prepareStages.add(findByEmailStatement);
      // Prepare the statement for `findByPhone(java.lang.String)`:
      SimpleStatement findByPhoneStatement_simple = customerHelper.selectStart().whereRaw("phone = :phone").build();
      LOG.debug("[{}] Preparing query `{}` for method findByPhone(java.lang.String)",
          context.getSession().getName(),
          findByPhoneStatement_simple.getQuery());
      CompletionStage<PreparedStatement> findByPhoneStatement = prepare(findByPhoneStatement_simple, context);
      prepareStages.add(findByPhoneStatement);
      // Prepare the statement for `findAll()`:
      SimpleStatement findAllStatement_simple = customerHelper.selectByPrimaryKeyParts(0).build();
      LOG.debug("[{}] Preparing query `{}` for method findAll()",
          context.getSession().getName(),
          findAllStatement_simple.getQuery());
      CompletionStage<PreparedStatement> findAllStatement = prepare(findAllStatement_simple, context);
      prepareStages.add(findAllStatement);
      // Prepare the statement for `findAllWithFiltering()`:
      SimpleStatement findAllWithFilteringStatement_simple = customerHelper.selectByPrimaryKeyParts(0).build();
      LOG.debug("[{}] Preparing query `{}` for method findAllWithFiltering()",
          context.getSession().getName(),
          findAllWithFilteringStatement_simple.getQuery());
      CompletionStage<PreparedStatement> findAllWithFilteringStatement = prepare(findAllWithFilteringStatement_simple, context);
      prepareStages.add(findAllWithFilteringStatement);
      // Prepare the statement for `delete(MODELS.Customer)`:
      SimpleStatement deleteStatement_simple = customerHelper.deleteByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method delete(MODELS.Customer)",
          context.getSession().getName(),
          deleteStatement_simple.getQuery());
      CompletionStage<PreparedStatement> deleteStatement = prepare(deleteStatement_simple, context);
      prepareStages.add(deleteStatement);
      // Initialize all method invokers
      // Build the DAO when all statements are prepared
      return CompletableFutures.allSuccessful(prepareStages)
          .thenApply(v -> (CustomerDAO) new CustomerDAOImpl__MapperGenerated(context,
              customerHelper,
              CompletableFutures.getCompleted(saveStatement),
              CompletableFutures.getCompleted(findByIdStatement),
              CompletableFutures.getCompleted(findByEmailStatement),
              CompletableFutures.getCompleted(findByPhoneStatement),
              CompletableFutures.getCompleted(findAllStatement),
              CompletableFutures.getCompleted(findAllWithFilteringStatement),
              CompletableFutures.getCompleted(deleteStatement)))
          .toCompletableFuture();
    } catch (Throwable t) {
      return CompletableFutures.failedFuture(t);
    }
  }

  public static CustomerDAO init(MapperContext context) {
    BlockingOperation.checkNotDriverThread();
    return CompletableFutures.getUninterruptibly(initAsync(context));
  }
}
