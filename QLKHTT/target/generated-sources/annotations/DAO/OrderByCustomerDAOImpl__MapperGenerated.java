package DAO;

import MODELS.OrderByCustomer;
import MODELS.OrderByCustomerHelper__MapperGenerated;
import com.datastax.oss.driver.api.core.PagingIterable;
import com.datastax.oss.driver.api.core.cql.BoundStatement;
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.api.mapper.entity.saving.NullSavingStrategy;
import com.datastax.oss.driver.internal.core.util.concurrent.BlockingOperation;
import com.datastax.oss.driver.internal.core.util.concurrent.CompletableFutures;
import com.datastax.oss.driver.internal.mapper.DaoBase;
import com.datastax.oss.driver.internal.querybuilder.update.DefaultUpdate;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
@SuppressWarnings("all")
public class OrderByCustomerDAOImpl__MapperGenerated extends DaoBase implements OrderByCustomerDAO {
  private static final Logger LOG = LoggerFactory.getLogger(OrderByCustomerDAOImpl__MapperGenerated.class);

  private final OrderByCustomerHelper__MapperGenerated orderByCustomerHelper;

  private final PreparedStatement saveStatement;

  private final PreparedStatement updateStatement;

  private final PreparedStatement deleteStatement;

  private final PreparedStatement findByCustomerStatement;

  private final PreparedStatement findByCustomerAndYearMonthStatement;

  private OrderByCustomerDAOImpl__MapperGenerated(MapperContext context,
      OrderByCustomerHelper__MapperGenerated orderByCustomerHelper, PreparedStatement saveStatement,
      PreparedStatement updateStatement, PreparedStatement deleteStatement,
      PreparedStatement findByCustomerStatement,
      PreparedStatement findByCustomerAndYearMonthStatement) {
    super(context);
    this.orderByCustomerHelper = orderByCustomerHelper;
    this.saveStatement = saveStatement;
    this.updateStatement = updateStatement;
    this.deleteStatement = deleteStatement;
    this.findByCustomerStatement = findByCustomerStatement;
    this.findByCustomerAndYearMonthStatement = findByCustomerAndYearMonthStatement;
  }

  @Override
  public void save(OrderByCustomer order) {
    BoundStatementBuilder boundStatementBuilder = saveStatement.boundStatementBuilder();
    orderByCustomerHelper.set(order, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public void update(OrderByCustomer order) {
    BoundStatementBuilder boundStatementBuilder = updateStatement.boundStatementBuilder();
    orderByCustomerHelper.set(order, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public void delete(OrderByCustomer order) {
    BoundStatementBuilder boundStatementBuilder = deleteStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("customer_id", order.getCustomerId(), UUID.class);
    boundStatementBuilder = boundStatementBuilder.set("yyyy_mm", order.getYearMonth(), String.class);
    boundStatementBuilder = boundStatementBuilder.set("order_date", order.getOrderDate(), Instant.class);
    boundStatementBuilder = boundStatementBuilder.set("order_id", order.getOrderId(), UUID.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public PagingIterable<OrderByCustomer> findByCustomer(UUID customerId) {
    BoundStatementBuilder boundStatementBuilder = findByCustomerStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("customerId", customerId, UUID.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, orderByCustomerHelper);
  }

  @Override
  public PagingIterable<OrderByCustomer> findByCustomerAndYearMonth(UUID customerId,
      String yearMonth) {
    BoundStatementBuilder boundStatementBuilder = findByCustomerAndYearMonthStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("customer_id", customerId, UUID.class);
    boundStatementBuilder = boundStatementBuilder.set("yyyy_mm", yearMonth, String.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, orderByCustomerHelper);
  }

  public static CompletableFuture<OrderByCustomerDAO> initAsync(MapperContext context) {
    LOG.debug("[{}] Initializing new instance for keyspace = {} and table = {}",
        context.getSession().getName(),
        context.getKeyspaceId(),
        context.getTableId());
    throwIfProtocolVersionV3(context);
    try {
      // Initialize all entity helpers
      OrderByCustomerHelper__MapperGenerated orderByCustomerHelper = new OrderByCustomerHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        orderByCustomerHelper.validateEntityFields();
      }
      List<CompletionStage<PreparedStatement>> prepareStages = new ArrayList<>();
      // Prepare the statement for `save(MODELS.OrderByCustomer)`:
      SimpleStatement saveStatement_simple = orderByCustomerHelper.insert().build();
      LOG.debug("[{}] Preparing query `{}` for method save(MODELS.OrderByCustomer)",
          context.getSession().getName(),
          saveStatement_simple.getQuery());
      CompletionStage<PreparedStatement> saveStatement = prepare(saveStatement_simple, context);
      prepareStages.add(saveStatement);
      // Prepare the statement for `update(MODELS.OrderByCustomer)`:
      SimpleStatement updateStatement_simple = SimpleStatement.newInstance(((DefaultUpdate)orderByCustomerHelper.updateByPrimaryKey()).asCql());
      LOG.debug("[{}] Preparing query `{}` for method update(MODELS.OrderByCustomer)",
          context.getSession().getName(),
          updateStatement_simple.getQuery());
      CompletionStage<PreparedStatement> updateStatement = prepare(updateStatement_simple, context);
      prepareStages.add(updateStatement);
      // Prepare the statement for `delete(MODELS.OrderByCustomer)`:
      SimpleStatement deleteStatement_simple = orderByCustomerHelper.deleteByPrimaryKeyParts(4).build();
      LOG.debug("[{}] Preparing query `{}` for method delete(MODELS.OrderByCustomer)",
          context.getSession().getName(),
          deleteStatement_simple.getQuery());
      CompletionStage<PreparedStatement> deleteStatement = prepare(deleteStatement_simple, context);
      prepareStages.add(deleteStatement);
      // Prepare the statement for `findByCustomer(java.util.UUID)`:
      SimpleStatement findByCustomerStatement_simple = orderByCustomerHelper.selectStart().whereRaw("customer_id = :customerId ALLOW FILTERING").build();
      LOG.debug("[{}] Preparing query `{}` for method findByCustomer(java.util.UUID)",
          context.getSession().getName(),
          findByCustomerStatement_simple.getQuery());
      CompletionStage<PreparedStatement> findByCustomerStatement = prepare(findByCustomerStatement_simple, context);
      prepareStages.add(findByCustomerStatement);
      // Prepare the statement for `findByCustomerAndYearMonth(java.util.UUID,java.lang.String)`:
      SimpleStatement findByCustomerAndYearMonthStatement_simple = orderByCustomerHelper.selectByPrimaryKeyParts(2).build();
      LOG.debug("[{}] Preparing query `{}` for method findByCustomerAndYearMonth(java.util.UUID,java.lang.String)",
          context.getSession().getName(),
          findByCustomerAndYearMonthStatement_simple.getQuery());
      CompletionStage<PreparedStatement> findByCustomerAndYearMonthStatement = prepare(findByCustomerAndYearMonthStatement_simple, context);
      prepareStages.add(findByCustomerAndYearMonthStatement);
      // Initialize all method invokers
      // Build the DAO when all statements are prepared
      return CompletableFutures.allSuccessful(prepareStages)
          .thenApply(v -> (OrderByCustomerDAO) new OrderByCustomerDAOImpl__MapperGenerated(context,
              orderByCustomerHelper,
              CompletableFutures.getCompleted(saveStatement),
              CompletableFutures.getCompleted(updateStatement),
              CompletableFutures.getCompleted(deleteStatement),
              CompletableFutures.getCompleted(findByCustomerStatement),
              CompletableFutures.getCompleted(findByCustomerAndYearMonthStatement)))
          .toCompletableFuture();
    } catch (Throwable t) {
      return CompletableFutures.failedFuture(t);
    }
  }

  public static OrderByCustomerDAO init(MapperContext context) {
    BlockingOperation.checkNotDriverThread();
    return CompletableFutures.getUninterruptibly(initAsync(context));
  }
}
