package DAO;

import MODELS.LoyaltyAccount;
import MODELS.LoyaltyAccountHelper__MapperGenerated;
import com.datastax.oss.driver.api.core.PagingIterable;
import com.datastax.oss.driver.api.core.cql.BoundStatement;
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.api.mapper.entity.saving.NullSavingStrategy;
import com.datastax.oss.driver.internal.core.util.concurrent.BlockingOperation;
import com.datastax.oss.driver.internal.core.util.concurrent.CompletableFutures;
import com.datastax.oss.driver.internal.mapper.DaoBase;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
@SuppressWarnings("all")
public class LoyaltyAccountDAOImpl__MapperGenerated extends DaoBase implements LoyaltyAccountDAO {
  private static final Logger LOG = LoggerFactory.getLogger(LoyaltyAccountDAOImpl__MapperGenerated.class);

  private final LoyaltyAccountHelper__MapperGenerated loyaltyAccountHelper;

  private final PreparedStatement saveStatement;

  private final PreparedStatement findByIdStatement;

  private final PreparedStatement findByTierStatement;

  private LoyaltyAccountDAOImpl__MapperGenerated(MapperContext context,
      LoyaltyAccountHelper__MapperGenerated loyaltyAccountHelper, PreparedStatement saveStatement,
      PreparedStatement findByIdStatement, PreparedStatement findByTierStatement) {
    super(context);
    this.loyaltyAccountHelper = loyaltyAccountHelper;
    this.saveStatement = saveStatement;
    this.findByIdStatement = findByIdStatement;
    this.findByTierStatement = findByTierStatement;
  }

  @Override
  public void save(LoyaltyAccount loyaltyAccount) {
    BoundStatementBuilder boundStatementBuilder = saveStatement.boundStatementBuilder();
    loyaltyAccountHelper.set(loyaltyAccount, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public LoyaltyAccount findById(UUID customerId) {
    BoundStatementBuilder boundStatementBuilder = findByIdStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("customer_id", customerId, UUID.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToSingleEntity(boundStatement, loyaltyAccountHelper);
  }

  @Override
  public PagingIterable<LoyaltyAccount> findByTier(String tier) {
    BoundStatementBuilder boundStatementBuilder = findByTierStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("tier", tier, String.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, loyaltyAccountHelper);
  }

  public static CompletableFuture<LoyaltyAccountDAO> initAsync(MapperContext context) {
    LOG.debug("[{}] Initializing new instance for keyspace = {} and table = {}",
        context.getSession().getName(),
        context.getKeyspaceId(),
        context.getTableId());
    throwIfProtocolVersionV3(context);
    try {
      // Initialize all entity helpers
      LoyaltyAccountHelper__MapperGenerated loyaltyAccountHelper = new LoyaltyAccountHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        loyaltyAccountHelper.validateEntityFields();
      }
      List<CompletionStage<PreparedStatement>> prepareStages = new ArrayList<>();
      // Prepare the statement for `save(MODELS.LoyaltyAccount)`:
      SimpleStatement saveStatement_simple = loyaltyAccountHelper.insert().build();
      LOG.debug("[{}] Preparing query `{}` for method save(MODELS.LoyaltyAccount)",
          context.getSession().getName(),
          saveStatement_simple.getQuery());
      CompletionStage<PreparedStatement> saveStatement = prepare(saveStatement_simple, context);
      prepareStages.add(saveStatement);
      // Prepare the statement for `findById(java.util.UUID)`:
      SimpleStatement findByIdStatement_simple = loyaltyAccountHelper.selectByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method findById(java.util.UUID)",
          context.getSession().getName(),
          findByIdStatement_simple.getQuery());
      CompletionStage<PreparedStatement> findByIdStatement = prepare(findByIdStatement_simple, context);
      prepareStages.add(findByIdStatement);
      // Prepare the statement for `findByTier(java.lang.String)`:
      SimpleStatement findByTierStatement_simple = loyaltyAccountHelper.selectStart().whereRaw("tier = :tier").build();
      LOG.debug("[{}] Preparing query `{}` for method findByTier(java.lang.String)",
          context.getSession().getName(),
          findByTierStatement_simple.getQuery());
      CompletionStage<PreparedStatement> findByTierStatement = prepare(findByTierStatement_simple, context);
      prepareStages.add(findByTierStatement);
      // Initialize all method invokers
      // Build the DAO when all statements are prepared
      return CompletableFutures.allSuccessful(prepareStages)
          .thenApply(v -> (LoyaltyAccountDAO) new LoyaltyAccountDAOImpl__MapperGenerated(context,
              loyaltyAccountHelper,
              CompletableFutures.getCompleted(saveStatement),
              CompletableFutures.getCompleted(findByIdStatement),
              CompletableFutures.getCompleted(findByTierStatement)))
          .toCompletableFuture();
    } catch (Throwable t) {
      return CompletableFutures.failedFuture(t);
    }
  }

  public static LoyaltyAccountDAO init(MapperContext context) {
    BlockingOperation.checkNotDriverThread();
    return CompletableFutures.getUninterruptibly(initAsync(context));
  }
}
