package DAO;

import KetNoiCSDL.KetNoICSDL;
import MODELS.*;
import com.datastax.oss.driver.api.core.CqlSession;

import java.math.BigDecimal;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.*;

public class OrderService {

    private final OrderByCustomerDAO orderByCustomerDAO;
    private final OrderByIdDAO orderByIdDAO;
    private final LoyaltyAccountDAO loyaltyDAO;

    // ƒê·ªãnh nghƒ©a ng∆∞·ª°ng x√©t h·∫°ng (ƒê·∫∑t ·ªü ƒë√¢y ho·∫∑c Config file l√† t·ªët nh·∫•t)
    private static final BigDecimal SILVER_THRESHOLD_SPENT = BigDecimal.valueOf(5_000_000);
    private static final int SILVER_THRESHOLD_ORDERS = 3;
    
    private static final BigDecimal GOLD_THRESHOLD_SPENT = BigDecimal.valueOf(15_000_000);
    private static final int GOLD_THRESHOLD_ORDERS = 10;

    public OrderService(CqlSession session) {
        this.orderByCustomerDAO = new OrderByCustomerDAO(session);
        this.orderByIdDAO = new OrderByIdDAO(session);
        this.loyaltyDAO = new LoyaltyAccountDAO(session);
    }

    /**
     * ------------------------- CREATE -------------------------
     */
    public void createOrder(UUID customerId, List<OrderItem> items) {
        if (items == null || items.isEmpty()) {
            throw new IllegalArgumentException("Danh s√°ch s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c r·ªóng.");
        }

        UUID orderId = UUID.randomUUID();
        Instant now = Instant.now();

        // 1Ô∏è‚É£ T√≠nh t·ªïng ti·ªÅn
        BigDecimal total = BigDecimal.ZERO;
        for (OrderItem item : items) {
            total = total.add(item.getPrice().multiply(BigDecimal.valueOf(item.getQuantity())));
        }

        // 2Ô∏è‚É£ X√°c ƒë·ªãnh kh√≥a ph√¢n v√πng "yyyy_MM"
        ZonedDateTime zdt = now.atZone(ZoneId.systemDefault());
        String yearMonth = String.format("%d_%02d", zdt.getYear(), zdt.getMonthValue());

        // 3Ô∏è‚É£ Ghi v√†o orders_by_customer
        OrderByCustomer orderByCustomer = new OrderByCustomer(
                customerId, yearMonth, now, orderId, total, items, "COMPLETED"
        );
        orderByCustomerDAO.save(orderByCustomer);

        // 4Ô∏è‚É£ Ghi v√†o orders_by_id
        OrderById orderById = new OrderById(orderId, customerId, now, total, items, "COMPLETED");
        orderByIdDAO.save(orderById);

        // 5Ô∏è‚É£ C·∫≠p nh·∫≠t ƒëi·ªÉm t√≠ch l≈©y
        updateLoyaltyAccount(customerId, total);

        System.out.println("‚úÖ T·∫°o ƒë∆°n h√†ng th√†nh c√¥ng: " + orderId);
    }
    
    // ... (C√°c ph∆∞∆°ng th·ª©c READ v√† UPDATE kh√¥ng thay ƒë·ªïi) ...
    
    /**
     * ------------------------- READ -------------------------
     */
    public List<OrderByCustomer> getOrdersByCustomer(UUID customerId) {
        return orderByCustomerDAO.findByCustomer(customerId);
    }

    public List<OrderByCustomer> getOrdersByCustomerAndMonth(UUID customerId, String yyyyMM) {
        return orderByCustomerDAO.findByCustomerAndYearMonth(customerId, yyyyMM);
    }

    public OrderById getOrderById(UUID orderId) {
        return orderByIdDAO.findById(orderId);
    }

    /**
     * ------------------------- UPDATE -------------------------
     */
    public void updateOrderStatus(UUID orderId, String status) {
        OrderById order = orderByIdDAO.findById(orderId);
        if (order == null) {
            System.out.println("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng: " + orderId);
            return;
        }

        // X·ª≠ l√Ω logic ho√†n ti·ªÅn/h·ªßy ƒë∆°n h√†ng: N·∫øu tr·∫°ng th√°i m·ªõi l√† 'CANCELLED'
        // v√† tr·∫°ng th√°i c≈© l√† 'COMPLETED', ta c·∫ßn rollback Loyalty.
        if (status.equalsIgnoreCase("CANCELLED") && order.getStatus().equalsIgnoreCase("COMPLETED")) {
            rollbackLoyaltyAccount(order.getCustomerId(), order.getTotal());
            System.out.println("üîÑ ƒê√£ ho√†n t√°c Loyalty do h·ªßy ƒë∆°n h√†ng " + orderId);
        }
        // *Ch√∫ √Ω: Logic ph·ª©c t·∫°p h∆°n c·∫ßn x√©t ƒë·∫øn c√°c tr·∫°ng th√°i kh√°c*

        // C·∫≠p nh·∫≠t trong orders_by_id
        order.setStatus(status);
        orderByIdDAO.update(order);

        // C·∫≠p nh·∫≠t trong orders_by_customer
        Instant orderDate = order.getOrderDate();
        ZonedDateTime zdt = orderDate.atZone(ZoneId.systemDefault());
        String yearMonth = String.format("%d_%02d", zdt.getYear(), zdt.getMonthValue());

        OrderByCustomer orderByCustomer = new OrderByCustomer(
                order.getCustomerId(),
                yearMonth,
                orderDate,
                orderId,
                order.getTotal(),
                order.getItems(),
                status
        );
        orderByCustomerDAO.update(orderByCustomer);

        System.out.println("‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng " + orderId + " ‚Üí " + status);
    }

    /**
     * ------------------------- DELETE -------------------------
     */
    public void deleteOrder(UUID orderId) {
        try {
            // 1Ô∏è‚É£ L·∫•y ƒë∆°n h√†ng t·ª´ orders_by_id ƒë·ªÉ l·∫•y th√¥ng tin c·∫ßn thi·∫øt
            OrderById order = orderByIdDAO.findById(orderId);
            if (order == null) {
                System.out.println("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y order: " + orderId);
                return;
            }
            
            // L·∫•y th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ x√≥a v√† ho√†n t√°c
            UUID customerId = order.getCustomerId();
            BigDecimal orderTotal = order.getTotal();
            Instant orderDate = order.getOrderDate();

            // 2Ô∏è‚É£ X√≥a kh·ªèi orders_by_id
            orderByIdDAO.delete(orderId);

            // 3Ô∏è‚É£ T√≠nh l·∫°i partition key `yyyy_mm`
            ZonedDateTime zdt = orderDate.atZone(ZoneId.systemDefault());
            String yearMonth = String.format("%d_%02d", zdt.getYear(), zdt.getMonthValue());

            // 4Ô∏è‚É£ X√≥a kh·ªèi orders_by_customer
            orderByCustomerDAO.delete(
                    customerId,
                    yearMonth,
                    orderDate,
                    orderId
            );

            // 5Ô∏è‚É£ HO√ÄN T√ÅC LOYALTY (Ch·ªâ ho√†n t√°c n·∫øu ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t√≠nh ƒëi·ªÉm)
            // Gi·∫£ s·ª≠ ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i "COMPLETED" m·ªõi ƒë∆∞·ª£c t√≠nh ƒëi·ªÉm/chi ti√™u
            // V√¨ OrderService t·∫°o ƒë∆°n h√†ng v·ªõi status "COMPLETED", ta m·∫∑c ƒë·ªãnh ho√†n t√°c.
            if (order.getStatus().equalsIgnoreCase("COMPLETED")) {
                 rollbackLoyaltyAccount(customerId, orderTotal);
            }

            System.out.println("‚úÖ ƒê√£ x√≥a order " + orderId + " kh·ªèi c·∫£ hai b·∫£ng.");

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi x√≥a order: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * ------------------------- LOYALTY LOGIC -------------------------
     */

    /**
     * C·∫≠p nh·∫≠t LoyaltyAccount khi c√≥ ƒë∆°n h√†ng m·ªõi (TƒÉng ƒëi·ªÉm, chi ti√™u, count).
     */
    private void updateLoyaltyAccount(UUID customerId, BigDecimal orderTotal) {
        LoyaltyAccount acc = loyaltyDAO.findByCustomer(customerId);
        Instant now = Instant.now();
        
        // 1. T√≠nh to√°n gi√° tr·ªã m·ªõi
        long newPoints = orderTotal.longValue();
        BigDecimal newLifetimeSpent = orderTotal;
        int newOrderCount = 1;

        if (acc != null) {
            newOrderCount = acc.getOrderCount() + 1;
            newLifetimeSpent = acc.getLifetimeSpent().add(orderTotal);
            newPoints = acc.getPoints() + orderTotal.longValue();
        }

        // 2. X√©t h·∫°ng th·∫ª
        String newTier = determineTier(newLifetimeSpent, newOrderCount);
        
        // 3. Chu·∫©n b·ªã ƒë·ªëi t∆∞·ª£ng v√† l∆∞u
        LoyaltyAccount accountToSave = (acc == null) 
            ? new LoyaltyAccount(customerId, newPoints, newTier, newLifetimeSpent, newOrderCount, now)
            : acc;
        
        if (acc != null) {
            accountToSave.setPoints(newPoints);
            accountToSave.setLifetimeSpent(newLifetimeSpent);
            accountToSave.setOrderCount(newOrderCount);
            accountToSave.setTier(newTier);
            accountToSave.setLastUpdated(now);
        }
        
        loyaltyDAO.save(accountToSave);
        System.out.println("üí≥ C·∫≠p nh·∫≠t LoyaltyAccount cho kh√°ch " + customerId + " ‚Üí H·∫°ng: " + newTier);
    }
    
    /**
     * HO√ÄN T√ÅC LoyaltyAccount khi h·ªßy ho·∫∑c x√≥a ƒë∆°n h√†ng (Gi·∫£m ƒëi·ªÉm, chi ti√™u, count).
     */
    private void rollbackLoyaltyAccount(UUID customerId, BigDecimal orderTotal) {
        LoyaltyAccount acc = loyaltyDAO.findByCustomer(customerId);

        if (acc == null) {
            System.err.println("‚ùå L·ªói rollback: Kh√¥ng t√¨m th·∫•y Loyalty Account cho kh√°ch h√†ng " + customerId);
            return;
        }
        
        // 1. T√≠nh to√°n gi√° tr·ªã m·ªõi (Gi·∫£m ƒëi)
        long newPoints = acc.getPoints() - orderTotal.longValue();
        BigDecimal newLifetimeSpent = acc.getLifetimeSpent().subtract(orderTotal);
        int newOrderCount = acc.getOrderCount() - 1;
        
        // ƒê·∫£m b·∫£o kh√¥ng c√≥ gi√° tr·ªã √¢m
        newPoints = Math.max(0, newPoints);
        newLifetimeSpent = newLifetimeSpent.max(BigDecimal.ZERO);
        newOrderCount = Math.max(0, newOrderCount);
        
        // 2. X√©t h·∫°ng th·∫ª m·ªõi (sau khi rollback)
        String newTier = determineTier(newLifetimeSpent, newOrderCount);

        // 3. C·∫≠p nh·∫≠t v√† l∆∞u
        acc.setPoints(newPoints);
        acc.setLifetimeSpent(newLifetimeSpent);
        acc.setOrderCount(newOrderCount);
        acc.setTier(newTier);
        acc.setLastUpdated(Instant.now());
        
        loyaltyDAO.save(acc);
        System.out.println("‚ûñ ƒê√£ ho√†n t√°c Loyalty cho kh√°ch " + customerId + " ‚Üí H·∫°ng m·ªõi: " + newTier);
    }

    /**
     * Logic x√©t h·∫°ng th·∫ª chung.
     */
    private String determineTier(BigDecimal totalSpent, int orderCount) {
        String newTier;
        
        // 1. X√©t H·∫°ng V√†ng (Gold)
        if (totalSpent.compareTo(GOLD_THRESHOLD_SPENT) >= 0 && orderCount >= GOLD_THRESHOLD_ORDERS) {
            newTier = "Gold";
        } 
        // 2. X√©t H·∫°ng B·∫°c (Silver)
        else if (totalSpent.compareTo(SILVER_THRESHOLD_SPENT) >= 0 && orderCount >= SILVER_THRESHOLD_ORDERS) {
            newTier = "Silver";
        } 
        // 3. H·∫°ng ƒê·ªìng (Bronze)
        else {
            newTier = "Bronze";
        }
        return newTier;
    }
}